import java.net.Socket;
import java.io.IOException;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.FileWriter;
import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CFactory;
import daq.ADXL345;
import fourier.PeakPicking;
import fourier.FrequencySpectrum;

/* This part of the code must be copied to an USB-drive that will be plugged into the nodes
The step for running the software properly are written along the code
lines: 26, 33, 50, 56, 77, and 79
*/

public class SensorNode {
	static int 		samplingRate;     	// [Hz]
	static int 		lengthOfDatasetRaw; // [n]
	static int 		lengthOfDataset; 	// [n]
	static int 		numberOfPeaks;		// [n]
	static int 		secondsMeasuring;	// [s]
	static double 	acceleration[];		// [x-acceleration, y-acceleration, z-acceleration][in g]		
	
	public static String serverIP = "192.168.61.203"; 
	/* Step 1: Define here the IP address of the server (Laptop)
	in windows: windows key + R -> cmd -> write ipconfig -> copy IPv4 in the serverIP value
	*/
	
    public static void main(String[] args) throws IOException, I2CFactory.UnsupportedBusNumberException, InterruptedException, ClassNotFoundException {
    	//Initiating communication to the server:
    	Socket s = new Socket(serverIP,1234);
    	/* Step 2: Define here the socket. In case of one node: 1234;
    	In case of multiple nodes: 1234, 1235, 1236, and so on
    	One value for each node
    	*/
    	
        DataOutputStream out = new DataOutputStream(s.getOutputStream());
        DataInputStream in = new DataInputStream(s.getInputStream());        
        
        //Receiving setup parameters
        samplingRate 		= in.readInt();
        numberOfPeaks		= in.readInt();
        secondsMeasuring	= in.readInt();
        
        
        ADXL345 adxl345 = new ADXL345(I2CBus.BUS_1, ADXL345.ADXL345_ADDRESS_ALT_LOW); //Sensor 1
        ADXL345 adxl345_1d = new ADXL345(I2CBus.BUS_1, ADXL345.ADXL345_ADDRESS_ALT_HIGH); //Sensor 2 with extra cable 
        adxl345.setup();
        adxl345.writeRange(ADXL345.ADXL345_RANGE_4G);
        // Step 2a: Defining the maximum amplitude of the acceleration sensor 1: 2G, 4G, 8G
        adxl345.writeFullResolution(true);
        adxl345.writeRate(ADXL345.ADXL345_RATE_100);
        
        adxl345_1d.setup();
        adxl345_1d.writeRange(ADXL345.ADXL345_RANGE_4G);
        // Step 2b: Defining the maximum amplitude of the acceleration sensor 2: 2G, 4G, 8G
        adxl345_1d.writeFullResolution(true);
        adxl345_1d.writeRate(ADXL345.ADXL345_RATE_100);
        
        float scalingFactor = adxl345.getScalingFactor();
        int factorMeasuringpoints = 400;
        lengthOfDatasetRaw	= factorMeasuringpoints * secondsMeasuring;
        lengthOfDataset		= samplingRate * secondsMeasuring;
        
        short[] raw = new short[3]; //Each value of the vector represent one direction of the acceleration
        short[] raw_1d = new short[3];
        
        double[] x_accelerations_s1_raw = new double[lengthOfDatasetRaw];
        double[] x_accelerations_s2_raw = new double[lengthOfDatasetRaw];        
        long[] timeinter = new long[lengthOfDatasetRaw];
        
        double[] x_accelerations_s1 = new double[lengthOfDataset];
        double[] x_accelerations_s2 = new double[lengthOfDataset];
        double[] x_accelerations_s1_bl = new double[lengthOfDataset];
        double[] x_accelerations_s2_bl = new double[lengthOfDataset];
        
        int deltaT = (int) 1000 / samplingRate; // sleeping time according to sampling frequency
        
        // sampling as fast as possible
        int aux = 0;        
        long t0 = System.nanoTime();
        while ( ((System.nanoTime()-t0)/1000000) < secondsMeasuring*1000) {
        	adxl345.readRawAcceleration(raw);
        	adxl345_1d.readRawAcceleration(raw_1d);
        	x_accelerations_s1_raw[aux] = (double) raw[2]*scalingFactor;
        	x_accelerations_s2_raw[aux] = (double) raw_1d[2]*scalingFactor;
        	timeinter[aux] = (System.nanoTime()-t0)/1000000; 
        	aux = aux+1;
 		}
        
        // Storing Data in RPI - not necessary in real implementations
        long date=System.currentTimeMillis();
        FileWriter writer = new FileWriter("/home/pi/Desktop/Data/" + Long.toString(date) + "_Acc.txt");
	    for(int k = 0; k < lengthOfDatasetRaw; k++){
	    	writer.write(timeinter[k]+ "\t" + x_accelerations_s1_raw[k] + "\t" +x_accelerations_s2_raw[k] + "\n");
	    }
	    writer.flush();
      	writer.close();
      	
        //Obtaining real data
      	samplingData samplingacc = new samplingData();
      	x_accelerations_s1 = samplingacc.getSamplingData(x_accelerations_s1_raw, timeinter, samplingRate, aux, lengthOfDataset);
      	x_accelerations_s2 = samplingacc.getSamplingData(x_accelerations_s2_raw, timeinter, samplingRate, aux, lengthOfDataset);
      	
        // Removing offset by subtracting the mean value
    	baseLineCorrection base=new baseLineCorrection();
    	x_accelerations_s1_bl = base.getBaseLineCorrection(x_accelerations_s1);
    	x_accelerations_s2_bl = base.getBaseLineCorrection(x_accelerations_s2);
        
        // Calculating the frequency spectrum of the stored data, processing the peak picking analysis
        FrequencySpectrum 	fSpec = new FrequencySpectrum(x_accelerations_s1_bl, deltaT);      
        FrequencySpectrum 	fSpec2 = new FrequencySpectrum(x_accelerations_s2_bl, deltaT);
        PeakPicking 		pp 	  = new PeakPicking(numberOfPeaks, fSpec);
        PeakPicking 		pp2 	  = new PeakPicking(numberOfPeaks, fSpec2);
        int [] 				detectedPeaks = pp.getPeaks();
        int [] 				detectedPeaks2 = pp2.getPeaks();
        
        // transmitting acceleration-data to the server
    	for (int i = 0; i < lengthOfDataset; i++) {
    		out.writeDouble(x_accelerations_s1_bl[i]);	
    		out.writeDouble(x_accelerations_s2_bl[i]);
    		out.flush();
		}
    	
    	//transmitting the detected peaks to the server
    	for (int i = 0; i < detectedPeaks.length; i++) {
    		out.writeDouble(detectedPeaks[i]);
    		out.writeDouble(detectedPeaks2[i]);
    		out.flush();
    	}
    	
    	s.close();
    	out.close();
    	in.close();
    	
    }
}